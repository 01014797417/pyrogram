{notice}

from io import BytesIO

from pyrogram.api.core.primitives import Int, Long, Int128, Int256, Bool, Bytes, String, Double, Vector
from pyrogram.api.core import TLObject
from pyrogram.api import types
from typing import List, Union, Any


class {combinator_name}(TLObject):  # type: ignore
    __slots__: List[str] = [{slots}]

    ID = {combinator_id}
    QUALNAME = "{qualname}"

    def __init__(self{arguments}) -> None:
        {fields}

    @staticmethod
    def read(b: BytesIO, *args: Any) -> "{combinator_name}":
        {read_types}
        return {combinator_name}({return_arguments})

    def write(self) -> bytes:
        b = BytesIO()
        b.write(Int(self.ID, False))

        {write_types}
        return b.getvalue()
